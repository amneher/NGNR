// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Article {
  id                 String @id @map("_id") @db.ObjectId
  image              String?
  title              String
  createDate         DateTime @default(now())
  description        String?
  content            String
  actions            String[]
  tagIDs             String[] @db.ObjectId
  tags               Tag[]  @relation(fields: [tagIDs], references: [id])
}

model Tag {
  id                String @id @map("_id") @db.ObjectId
  value              String
  articleIDs         String[] @db.ObjectId
  articles           Article[]   @relation(fields: [articleIDs], references: [id])
}

model Resume {
  id                String @id @map("_id") @db.ObjectId
  name              String
  photoURL          String?
  contact           ContactItem[]
  intro             String?
  experience        ResumeItem[]
}

model ContactItem {
  id                String @id @map("_id") @db.ObjectId
  name              String
  value             String
  resume            Resume @relation(fields: [resumeID], references: [id])
  resumeID          String @db.ObjectId
}

model ResumeItem {
  id                String @id @map("_id") @db.ObjectId
  title             String
  company           String
  startDate         DateTime @default(now())
  endDate           DateTime?
  description       String?
  items             String[]
  resume            Resume @relation(fields: [resumeID], references: [id])
  resumeID          String @db.ObjectId
}

model ResourceItem {
  id                String @id @map("_id") @db.ObjectId
  link              String?
  title             String
  content           String
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}